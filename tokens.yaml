LPAREN: "\\("
RPAREN: "\\)"
LCURLY: "\\{"
RCURLY: "\\}"
IF_KW: "i·f"
ELSE_KW: "e·l·s·e"
RETURN_KW: "r·e·t·u·r·n"
FOR_KW: "f·o·r"
BREAK_KW: "b·r·e·a·k"
CONTINUE_KW: "c·o·n·t·i·n·u·e"
CALLOUT_KW: "c·a·l·l·o·u·t"
DEF_KW: "d·e·f"
TYPE: "(i·n·t|b·o·o·l·e·a·n|v·o·i·d)"
BOOL_LITERAL: "(t·r·u·e|f·a·l·s·e)"
ASSIGN_OP: "=|+·=|-·="
REL_OP: "<|>|(<·=)|(>·=)"
EQ_OP: "=·=|!·="
COND_OP: "&·&|\\|·\\|"
HEX_DIGIT: "0·x·[0-9a-fA-F]·[0-9a-fA-F]*"
NUMBER: "(-?)·(0|([1-9]·[0-9]*))"
SEMICOLON: ";"
# STRING_LITERAL: "\"·(\\·[\\nt]|[-a-zA-Z0-9:./\\(\\)+*&%$#])·\""
H: "[abcdfsed()*]"
# STRING_LITERAL: "((\\\\·(\\\\|n|t))|([-a-zA-Z0-9]))*" # ·((\\·[\\nt])|([-a-zA-Z0-9:./+*&%$#]))·
ID: "[a-zA-Z_]·[a-zA-Z_]*"



