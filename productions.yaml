<program>: "class Program '{' <field_decl>* <method_decl>* '}'"
<field_decl>: "<type> { <id> | <id> '[' <int_literal> ']' }+, ;"
<method_decl>: "{ <type> | void"
<block>: "'{' <var_decl>* <statement>* '}'"
<var_decl>: "<type> <id>+, ;"
# <type> -> in lexer
<statement>: "<location> <assign_op> <expr> ; | <method_call> ;| if '(' <expr> ')' <block> { else <block> } ? | for <id> = <expr>, <expr> <block> | return <expr> ? ;| break ;| continue ;| <block>"
# <assign_op> -> in lexer
<method_call>: "<method_name> '(' [ <expr>* ] ')'"
<method_name>: "<id>"
<location>: <id> | <id> '[' <expr> ']'
<expr>: "<location> | <method_call> | <literal> | <expr> <bin_op> <expr> | - <expr> | ! <expr> | '(' <expr> ')'"
<callout_arg>: "<expr> | <string_literal>"
<bin_op>: "<arith_op> | <rel_op> | <eq_op> | <cond_op>"
# <arith_op> -> in lexer
# <rel_op> -> in lexer 
# <eq_op> -> in lexer 
# <cond_op> -> in lexer
<literal>: "<int_literal> | <char_literal> | <bool_literal>"
# <id> -> in lexer 
# <alpha_num> -> in lexer (implicitly)
# <alpha> -> in lexer (implicitly)
# <digit> -> in lexer (implicitly)
# <hex_digit> -> in lexer (a little differently)
# <bool_literal> -> in lexer 
# <char_literal> -> in lexer 
# <string_literal> -> in lexer
