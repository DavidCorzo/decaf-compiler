########################################################
# augmented grammar
########################################################
<program>: 
  - ['<program´>', '$']
########################################################
# ⟨program⟩ → class Program '{' ⟨fielddecl⟩* ⟨method_decl⟩* '}'
########################################################
<program´>: 
  - ['class', '%id%',
      '{', 
        '<field_decl*>', 
        '<method_decl*>',
      '}']
<field_decl*>:
  - ['<field_decl>', '<field_decl*>']
  - [null]
<method_decl*>:
  - ['<method_decl>', '<method_decl*>']
  - [null]
########################################################
# ⟨fielddecl⟩ → ⟨type⟩ {⟨id⟩ | ⟨id⟩ ′[′ ⟨intliteral⟩ ′]′}+
########################################################
<field_decl>: 
  - ['%type%', '<{id|id[int_literal]}+>', ';']
<{id|id[int_literal]}+>:
  - ['%id%', '<,{id|id[int_literal]}+>']
  - ['%id%', '[', '%int_literal%', ']', '<,{id|id[int_literal]}+>']
<,{id|id[int_literal]}+>:
  - [',', '%id%', '<{[int_literal]}?>', '<,{id|id[int_literal]}+>']
  - [null]
<{[int_literal]}?>:
  - ['[', '%int_literal%', ']']
  - [null]
########################################################
# ⟨method_decl⟩ → {⟨type⟩|void} ⟨id⟩ ({{⟨type⟩⟨id⟩}*}?) ⟨block⟩
########################################################
<method_decl>: 
  - ['%type%', '%id%', '(', '<args>', ')', '<block>']
<args>:
  - ['%type%', '%id%', '<args´>']
  - ['<args´>']
  # - ['%type%', '%id%']
  # - ['<args>', ',', <args>]
  # - [null]
<args´>:
  - [',', '<args>', '<args´>']
  - [null]
########################################################
# ⟨block⟩ → '{' ⟨var_decl⟩* ⟨statement⟩* '}'
########################################################
<block>: 
  - ['{', '<var_decl*>', <statement*>, '}']
<var_decl*>:
  - ['<var_decl>', '<var_decl*>']
  - [null]
<statement*>:
  - ['<statement>', '<statement*>']
  - [null]
########################################################
# ⟨var_decl⟩ → ⟨type⟩ ⟨id⟩+, ';'
########################################################
<var_decl>:
  - ['%type%', '<id+>', ';']
<id+>:
  - ['%id%', '<id+´>']
<id+´>:
  - [',', '%id%', '<id+´>']
  - [null]
# <type> -> in lexer
########################################################
# ⟨statement⟩ → ⟨location⟩ ⟨assign_op⟩ ⟨expr⟩ ;
#            | ⟨method_call⟩ ;
#            | if ( ⟨expr⟩ ) ⟨block⟩ {else ⟨block⟩}? ;
#            | for ⟨id⟩ = ⟨expr⟩, ⟨expr⟩ ⟨block⟩ ;
#            | return ⟨expr⟩? ;
#            | break ;
#            | continue ;
#            | ⟨block⟩ ;
########################################################
<statement>:
  - ['<location>', '%assign_op%', '<expr>']
  - ['<method_call>']
  - ['if', '(', '<expr>', ')', '<block>', '<else ⟨block⟩?>', ';']
  - ['for', '%id%', '%assign_op:=%', '<expr>', ',', '<expr>', '<block>', ';']
  - ['return', '<⟨expr⟩?>', ';']
  - ['break', ';']
  - ['continue', ';']
  - ['<block>', ';']
<else ⟨block⟩?>:
  - ['else', '<block>']
  - [null]
<⟨expr⟩?>:
  - ['<expr>']
  - [null]
# <assign_op> -> in lexer
########################################################
# ⟨method_call⟩ → ⟨method_name⟩ '(' [⟨expr⟩+,] ';'
########################################################
<method_call>: 
  - ['<method_name>', '(', '<{expr+,}?>', ')']
  - ['callout', '(', '%string_literal%', '<callout_arg+>', ')']
<{expr+,}?>:
  - ['<expr>', '<{expr+,}?´>']
<{expr+,}?´>:
  - [',', '<expr>', '<{expr+,}?´>']
  - [null]
<callout_arg+>:
  - [',', '<callout_arg>', <callout_arg+>]
  - [null]
########################################################
# ⟨method_name⟩ → ⟨id⟩
########################################################
<method_name>: 
  - ['%id%']
########################################################
# ⟨location⟩ → ⟨id⟩ | ⟨id⟩ '[' <expr> ']'
########################################################
<location>: 
  - ['%id%'] 
  - ['%id%', '[', '<expr>', ']']
########################################################
# ⟨expr⟩ → ⟨location⟩
#       | ⟨method_call⟩
#       | ⟨literal⟩
#       | ⟨expr⟩ ⟨bin_op⟩ ⟨expr⟩
#       | - ⟨expr⟩
#       | ! ⟨expr⟩
#       | ( ⟨expr⟩ )
########################################################
# <expr>: LEFT RECURSIVE
#   - ['<location>']
#   - ['<method_call>']
#   - ['<literal>']
#   - ['<expr>', '<bin_op>', '<expr>']
#   - ['-', <expr>]
#   - ['!', <expr>]
#   - ['(', <expr>, ')']
<expr>: 
  - ['<location>', '<expr´>']
  - ['<method_call>', '<expr´>']
  - ['<literal>', '<expr´>']
  - ['-', '<expr>', '<expr´>']
  - ['!', '<expr>', '<expr´>']
  - ['(', '<expr>', ')', '<expr´>']
<expr´>:
  - ['<bin_op>', '<expr>', <expr´>]
  - [null]
########################################################
# ⟨callout_arg⟩ → ⟨expr⟩ | ⟨string_literal⟩
#######################################################
<callout_arg>: 
  - ['<expr>']
  - ['%string_literal%']
########################################################
# ⟨bin_op⟩ → ⟨arith_op⟩ 
#         | ⟨rel_op⟩
#         | ⟨eq_op⟩
#         | ⟨cond_op⟩
########################################################
<bin_op>: 
  - ['%arith_op%']
  - ['%rel_op%']
  - ['%eq_op%']
  - ['%cond_op%']
# <arith_op> -> in lexer
# <rel_op> -> in lexer 
# <eq_op> -> in lexer 
# <cond_op> -> in lexer
########################################################
# 
########################################################
<literal>: 
  - ['%int_literal%']
  - ['%char_literal%']
  - ['%bool_literal%']
# <id> -> in lexer 
# <alpha_num> -> in lexer (implicitly)
# <alpha> -> in lexer (implicitly)
# <digit> -> in lexer (implicitly)
# <hex_digit> -> in lexer (a little differently)
# <bool_literal> -> in lexer 
# <char_literal> -> in lexer 
# <string_literal> -> in lexer
